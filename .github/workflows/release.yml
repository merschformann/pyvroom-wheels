name: Release

on:
    workflow_dispatch:
        inputs:
            tag:
                description: "Tag of pyvroom to release"
                required: true

permissions:
    contents: write

jobs:
    build:
        name: ${{ matrix.platform }}
        runs-on: ${{ matrix.worker }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - worker: [rpi, raw]
                      platform: linux-arm64
                      os: linux
                      host: self
                    - worker: ubuntu-latest
                      platform: linux-x64
                      os: linux
                      host: gh
                    - worker: [macmini, raw]
                      platform: macos-arm64
                      os: macos
                      host: self
                    - worker: macos-latest
                      platform: macos-x64
                      os: macos
                      host: gh
                    - worker: windows-latest
                      platform: windows-x64
                      os: windows
                      host: gh

        env:
            TAG: ${{ github.event.inputs.tag }}
            PYVROOM_VERSION: ${{ github.event.inputs.tag }}
        steps:
            - name: Checkout pyvroom
              uses: actions/checkout@v4
              with:
                  repository: "VROOM-Project/pyvroom"
                  submodules: "recursive"
                  ref: ${{ github.event.inputs.tag }}

            - name: Checkout self
              uses: actions/checkout@v4
              with:
                  path: self

            - name: Apply patches (non-Windows)
              if: matrix.os != 'windows'
              run: |
                  git apply self/patches/$TAG.patch
                  echo "Status after applying patches:"
                  git status
                  echo "Diff after applying patches:"
                  git add --all
                  git diff --cached

            - name: Apply patches (Windows)
              if: matrix.os == 'windows'
              run: |
                  git apply self/patches/$env:TAG.patch
                  echo "Status after applying patches:"
                  git status
                  echo "Diff after applying patches:"
                  git add --all
                  git diff --cached

            - name: Cache Conan
              id: cache-conan
              uses: actions/cache@v3
              if: matrix.os == 'windows'
              with:
                  path: |
                      conan_build
                      conan_data
                  key: conan-${{ matrix.worker }}-${{ hashFiles('conanfile.txt') }}

            - name: Setup Python
              if: matrix.host == 'gh'
              uses: actions/setup-python@v5
              with:
                  python-version: 3.11

            - name: Install Conan
              if: matrix.os == 'windows' && steps.cache-conan.outputs.cache-hit != 'true'
              run: |
                  pip install pip --upgrade
                  pip install conan<2.0.0
                  conan profile new default --detect
                  conan profile update "settings.compiler=Visual Studio" default
                  conan profile update "settings.compiler.version=17" default
                  conan config set "storage.path=$env:GITHUB_WORKSPACE/conan_data"
                  conan install --build=openssl --install-folder conan_build .

            - name: Write version
              run: |
                  echo $PYVROOM_VERSION > VERSION

            - name: Make version available on Windows runners
              if: matrix.os == 'windows'
              run: |
                  echo "PYVROOM_VERSION=${{ env.PYVROOM_VERSION }}" | Out-File -FilePath $env:GITHUB_ENV -Append

            - name: Install build dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r build-requirements.txt
                  pip install cibuildwheel

            - name: Install asio on macOS
              if: matrix.platform == 'macos-x64' || matrix.platform == 'macos-arm64'
              run: |
                  brew install asio
                  echo "LDFLAGS=\"-L/opt/homebrew/lib\"" >> $GITHUB_ENV
                  echo "CPPFLAGS=\"-I/opt/homebrew/include\"" >> $GITHUB_ENV
                  # echo "MACOSX_DEPLOYMENT_TARGET=10.14" >> $GITHUB_ENV
                  echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV

            - name: Build wheels
              run: |
                  python -c "import os; print(os.environ)"
                  python -m cibuildwheel --output-dir wheelhouse

            - name: List files (non-Windows)
              if: matrix.os != 'windows'
              run: |
                  ls -ahl wheelhouse

            - name: List files (Windows)
              if: matrix.os == 'windows'
              run: |
                  Get-ChildItem -Path wheelhouse

            - name: Upload wheels
              uses: actions/upload-artifact@v3
              with:
                  path: wheelhouse/*.whl
                  name: artifact
                  if-no-files-found: warn

    pypi:
        name: Release to PyPI
        runs-on: ubuntu-latest
        needs: build
        strategy:
            matrix:
                include:
                    - target-env: pypi
                      target-url: https://pypi.org/p/pyvroomwheels
                    - target-env: pypi-test
                      target-url: https://test.pypi.org/p/pyvroomwheels
        environment:
            name: ${{ matrix.target-env }}
            url: ${{ matrix.target-url }}
        permissions:
            id-token: write # This is required for trusted publishing to PyPI
        steps:
            - name: Download wheels
              uses: actions/download-artifact@v3
              with:
                  name: artifact
                  path: dist

            - name: List files
              run: |
                  ls -ahl dist

            - name: Publish package distributions to PyPI
              if: ${{ matrix.target-env == 'pypi' }}
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  packages-dir: ./dist

            - name: Publish package distributions to TestPyPI
              if: ${{ matrix.target-env == 'pypi-test' }}
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  repository-url: https://test.pypi.org/legacy/
                  packages-dir: ./dist

    release:
        name: Release to GitHub
        runs-on: ubuntu-latest
        needs: pypi
        steps:
            - name: Download wheels
              uses: actions/download-artifact@v3
              with:
                  name: artifact
                  path: dist

            - name: List files
              run: |
                  ls -ahl dist

            - name: Rename wheels
              run: |
                  for file in dist/*.whl; do
                      mv -v $file $(echo $file | sed "s/pyvroom/pyvroomwheels/")
                  done

            - name: Create release
              uses: softprops/action-gh-release@v2
              with:
                  files: dist/*
                  tag_name: ${{ github.event.inputs.tag }}
                  body: "Release of pyvroom ${{ github.event.inputs.tag }}."
                  name: ${{ github.event.inputs.tag }}
                  fail_on_unmatched_files: true
